variables:
  stream: devel
  prod: true

releasever: 41

packages:
  #
  # Add packages
  #
  # Management
  - htop
  # SELinux policy module for k3s
  - container-selinux k3s-selinux
  #
  # Restore packages
  #
  # We removed file-transfer.yaml, but curl is required for coreos-livepxe-rootfs.sh
  - curl
  # We removed user-experience.yaml, but bsdtar is required for 35coreos-live dracut module
  - bsdtar
  # We removed user-experience.yaml, but the improved MOTD experience might be useful
  - console-login-helper-messages-issuegen
  - console-login-helper-messages-profile
  # We removed shared-el9.yaml, but network teaming might be useful
  - NetworkManager-team teamd

#exclude-packages:
#  # Ensure containerd is removed
#  - containerd

# fedora-coreos-config/manifests/fedora-coreos.yaml
ref: fedora/${basearch}/coreos/${stream}
metadata:
  license: MIT
  name: k3s-coreos
  summary: K3s CoreOS ${stream}

# fedora-coreos-config/manifests/fedora-coreos.yaml
include:
  - fedora-coreos-minimal.yaml

postprocess:
  # Install k3s
  - |
    #!/usr/bin/env bash
    set -euxo pipefail
    source /etc/os-release

    # Download and install k3s
    curl -Lo /usr/local/bin/k3s https://github.com/k3s-io/k3s/releases/download/v1.32.2%2Bk3s1/k3s
    chmod 755 /usr/local/bin/k3s
    chown root:root /usr/local/bin/k3s

    # Write killall script
    cat >/usr/local/bin/k3s-killall.sh << \EOF
    #!/bin/sh
    [ $(id -u) -eq 0 ] || exec sudo --preserve-env=K3S_DATA_DIR $0 $@

    K3S_DATA_DIR=${K3S_DATA_DIR:-/var/lib/rancher/k3s}

    for bin in ${K3S_DATA_DIR}/data/**/bin/; do
        [ -d $bin ] && export PATH=$PATH:$bin:$bin/aux
    done

    set -x

    for service in /etc/systemd/system/k3s*.service; do
        [ -s $service ] && systemctl stop $(basename $service)
    done

    for service in /etc/init.d/k3s*; do
        [ -x $service ] && $service stop
    done

    pschildren() {
        ps -e -o ppid= -o pid= | \
        sed -e 's/^\s*//g; s/\s\s*/\t/g;' | \
        grep -w "^$1" | \
        cut -f2
    }

    pstree() {
        for pid in $@; do
            echo $pid
            for child in $(pschildren $pid); do
                pstree $child
            done
        done
    }

    killtree() {
        kill -9 $(
            { set +x; } 2>/dev/null;
            pstree $@;
            set -x;
        ) 2>/dev/null
    }

    remove_interfaces() {
        # Delete network interface(s) that match 'master cni0'
        ip link show 2>/dev/null | grep 'master cni0' | while read ignore iface ignore; do
            iface=${iface%%@*}
            [ -z "$iface" ] || ip link delete $iface
        done

        # Delete cni related interfaces
        ip link delete cni0
        ip link delete flannel.1
        ip link delete flannel-v6.1
        ip link delete kube-ipvs0
        ip link delete flannel-wg
        ip link delete flannel-wg-v6

        # Restart tailscale
        if [ -n "$(command -v tailscale)" ]; then
            tailscale set --advertise-routes=
        fi
    }

    getshims() {
        ps -e -o pid= -o args= | sed -e 's/^ *//; s/\s\s*/\t/;' | grep -w "${K3S_DATA_DIR}"'/data/[^/]*/bin/containerd-shim' | cut -f1
    }

    killtree $({ set +x; } 2>/dev/null; getshims; set -x)

    do_unmount_and_remove() {
        set +x
        while read -r _ path _; do
            case "$path" in $1*) echo "$path" ;; esac
        done < /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount -f "$0" && rm -rf "$0"'
        set -x
    }

    do_unmount_and_remove '/run/k3s'
    do_unmount_and_remove '/var/lib/kubelet/pods'
    do_unmount_and_remove '/var/lib/kubelet/plugins'
    do_unmount_and_remove '/run/netns/cni-'

    # Remove CNI namespaces
    ip netns show 2>/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete

    remove_interfaces

    rm -rf /var/lib/cni/
    iptables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | iptables-restore
    ip6tables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | ip6tables-restore
    EOF
    chmod 755 /usr/local/bin/k3s-killall.sh
    chown root:root /usr/local/bin/k3s-killall.sh

    # Write systemd service files
    cat >/etc/systemd/system/k3s.service << \EOF
    [Unit]
    Description=Lightweight Kubernetes (Server)
    Documentation=https://k3s.io
    Wants=network-online.target
    After=network-online.target

    [Install]
    WantedBy=multi-user.target

    [Service]
    Type=notify
    EnvironmentFile=-/etc/default/%N
    EnvironmentFile=-/etc/sysconfig/%N
    EnvironmentFile=-/etc/systemd/system/k3s.service.env
    KillMode=process
    Delegate=yes
    User=root
    # Having non-zero Limit*s causes performance problems due to accounting overhead
    # in the kernel. We recommend using cgroups to do container-local accounting.
    LimitNOFILE=1048576
    LimitNPROC=infinity
    LimitCORE=infinity
    TasksMax=infinity
    TimeoutStartSec=0
    Restart=always
    RestartSec=5s
    ExecStartPre=/bin/sh -xc '! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service 2>/dev/null'
    ExecStartPre=-/sbin/modprobe br_netfilter
    ExecStartPre=-/sbin/modprobe overlay
    ExecStart=/usr/local/bin/k3s server
    EOF
    cat >/etc/systemd/system/k3s-agent.service << \EOF
    [Unit]
    Description=Lightweight Kubernetes (Agent)
    Documentation=https://k3s.io
    Wants=network-online.target
    After=network-online.target

    [Install]
    WantedBy=multi-user.target

    [Service]
    Type=notify
    EnvironmentFile=-/etc/default/%N
    EnvironmentFile=-/etc/sysconfig/%N
    EnvironmentFile=-/etc/systemd/system/k3s-agent.service.env
    KillMode=process
    Delegate=yes
    User=root
    # Having non-zero Limit*s causes performance problems due to accounting overhead
    # in the kernel. We recommend using cgroups to do container-local accounting.
    LimitNOFILE=1048576
    LimitNPROC=infinity
    LimitCORE=infinity
    TasksMax=infinity
    TimeoutStartSec=0
    Restart=always
    RestartSec=5s
    ExecStartPre=/bin/sh -xc '! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service 2>/dev/null'
    ExecStartPre=-/sbin/modprobe br_netfilter
    ExecStartPre=-/sbin/modprobe overlay
    ExecStart=/usr/local/bin/k3s agent
    EOF

    # Write systemd environment files
    cat >/etc/systemd/system/k3s.service.env << \EOF
    # K3s settings should be added here
    ENV
    cat >/etc/systemd/system/k3s-agent.service.env << \EOF
    # K3s settings should be added here
    ENV

# vim: set et ts=2 sw=2:
